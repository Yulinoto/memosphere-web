import { NextRequest, NextResponse } from "next/server";

export const runtime = "nodejs";

/**
 * ROUTE : /api/book/generate
 * Construit un texte biographique complet √† partir des donn√©es brutes (entries + resolved),
 * pas √† partir des r√©sum√©s.
 */
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { blocks = [], style = "narratif", pointOfView = "first" } = body || {};

    if (!blocks || typeof blocks !== "object") {
      return NextResponse.json({ error: "Missing or invalid 'blocks' object" }, { status: 400 });
    }

    // üß± √âtape 1 ‚Äî Pr√©parer la mati√®re brute de chaque bloc
    const chapters = Object.values(blocks)
      .map((b: any) => {
        const title = b?.title || "Chapitre sans titre";

        // üß© Donn√©es structur√©es ("faits" canoniques)
        const facts =
          b?.resolved && typeof b.resolved === "object"
            ? Object.entries(b.resolved)
                .map(([k, v]: any) => `${k}: ${(v?.value ?? "").toString().trim()}`)
                .join("\n")
            : "Aucun fait sp√©cifique enregistr√©.";

        // üí¨ Entr√©es brutes (issues des r√©ponses d‚Äôinterview)
        const memories =
          b?.entries && Array.isArray(b.entries)
            ? b.entries
                .filter((e: any) => !!(e?.a || e?.q))
                .map((e: any) => `${e.q ? e.q + " ‚Äî " : ""}${e.a}`)
                .join("\n")
            : "Aucun souvenir renseign√©.";

        return `
### ${title}

Faits connus :
${facts}

Souvenirs racont√©s :
${memories}
`;
      })
      .join("\n\n");

    // üß† √âtape 2 ‚Äî Construire le prompt de g√©n√©ration
    const styleText =
      style === "poetique"
        ? "avec une plume po√©tique, sensorielle et √©motionnelle."
        : style === "journalistique"
        ? "avec une narration claire, factuelle et fluide."
        : "avec un ton naturel, sinc√®re et humain.";

    const povInstruction =
      pointOfView === "first"
        ? "R√©dige √† la premi√®re personne (utilise 'je')."
        : "R√©dige √† la troisi√®me personne (utilise 'il' ou 'elle').";

    const prompt = `
Tu es un √©crivain biographique professionnel.
Tu re√ßois les souvenirs bruts et les faits r√©els d'une personne.
N‚Äôinvente rien qui ne soit pas pr√©sent dans les donn√©es.
Raconte ces √©l√©ments comme une histoire de vie fluide et coh√©rente.
Structure ton texte en chapitres clairs avec titres.
R√©dige ${styleText}
${povInstruction}

Voici les donn√©es √† partir desquelles √©crire :
${chapters}
`.trim();

    // ü™Ñ √âtape 3 ‚Äî Appel au mod√®le
    const res = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "Tu es un √©crivain biographique professionnel et sensible.",
          },
          { role: "user", content: prompt },
        ],
        temperature: 0.7,
      }),
    });

    const json = await res.json();
    const bookText =
      json?.choices?.[0]?.message?.content?.trim() || "Erreur : aucune r√©ponse g√©n√©r√©e.";

    // üßæ √âtape 4 ‚Äî R√©ponse structur√©e
    return NextResponse.json({
      ok: true,
      text: bookText,
      style,
      pointOfView,
      tokenUsage: json?.usage ?? null,
    });
  } catch (e: any) {
    console.error("BOOK GENERATION ERROR:", e);
    return NextResponse.json(
      { ok: false, error: e?.message || "Erreur interne" },
      { status: 500 }
    );
  }
}
